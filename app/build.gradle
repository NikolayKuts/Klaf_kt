import com.example.klaf.di.dependencies.*

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id "com.google.firebase.crashlytics"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_plugin_serialization"
//    id 'org.jetbrains.kotlin.android.extensions'
    id "kotlin-parcelize"
}

android {
    defaultConfig {
        applicationId "com.kuts.klaf"
        compileSdk 34
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments { arg("room.schemaLocation", "$projectDir/schemas") }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    namespace 'com.kuts.klaf'
}

dependencies {

    /** nodules **/
    implementation project(Modules.Domain)

    /** core **/
    implementation(Kotlin.Stdlib)
    implementation(Core.Core)
    implementation(Core.AppCompat)
    implementation(Core.ConstraintLayout)
    implementation(Core.LegacySupport)
    implementation(Core.Fragment)
    implementation(Core.Material)
    implementation(Core.Preferences)

    /** tests **/
    testImplementation(Tests.JunitCore)
    androidTestImplementation(Tests.JunitAndroid)
    androidTestImplementation(Tests.Espresso)
    testImplementation(Tests.Mockk)
    testImplementation(Tests.Coroutine)
    testImplementation(Tests.Turbine)
    testImplementation(Tests.Kotlin)

    /** navigation **/
    implementation(Navigation.FragmentKtx)
    implementation(Navigation.UiKtx)
    implementation(Navigation.DynamicFeaturesFragment)

    /** room **/
    implementation(Room.Runtime)
    implementation(Room.Ktx)
    kapt(Room.Compiler)

    /** lifecycle **/
    implementation(Lifecycle.ViewModelKtx)
    implementation(Lifecycle.LiveDataKtx)
    implementation(Lifecycle.ViewModelSavedState)

    /** hilt **/
    implementation(Hilt.Android)
    kapt(Hilt.DaggerCompiler)
    kapt(Hilt.AndroidCompiler)
    implementation(Hilt.Work)

    /** firebase **/
    implementation platform(Firebase.Bom)
    implementation(Firebase.AnalyticsKts)
    implementation(Firebase.FirestoreKtx)
    implementation(Firebase.Authentication)
    implementation(Firebase.CoroutinePlayServices)
    implementation(Firebase.Crashlytics)

    /** compose **/
    implementation platform(Compose.Bom)
    implementation(Compose.Compiler)
    implementation(Compose.Runtime)
    implementation(Compose.Ui)
    implementation(Compose.Foundation)
    implementation(Compose.FoundationLayout)
    implementation(Compose.Material)
    implementation(Compose.RuntimeLivedata)
    implementation(Compose.UiTooling)
    implementation(Compose.Activity)
    implementation(Compose.UiToolingPreview)
    implementation(Compose.ConstraintLayout)
    implementation(Compose.ThemeAdapter)
    implementation(Compose.Accompanist)

    /** work manager **/
    implementation(WorkManager.Core)

    /** serialization **/
    implementation(Serialization.Core)

    /** DataStore **/
    implementation(DataStore.Core)

    /** Retrofit **/
    implementation(Retrofit.Core)
}